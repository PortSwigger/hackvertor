package burp;

import java.awt.Component;
import java.io.File;
import java.io.OutputStream;
import java.net.URL;
import java.util.List;
import java.util.Map;

public interface IBurpExtenderCallbacks {
    void setExtensionName(String name);
    IExtensionHelpers getHelpers();
    OutputStream getStdout();
    OutputStream getStderr();
    void printOutput(String output);
    void printError(String error);
    void registerExtensionStateListener(IExtensionStateListener listener);
    List<IExtensionStateListener> getExtensionStateListeners();
    void removeExtensionStateListener(IExtensionStateListener listener);
    void registerHttpListener(IHttpListener listener);
    List<IHttpListener> getHttpListeners();
    void removeHttpListener(IHttpListener listener);
    void registerProxyListener(IProxyListener listener);
    List<IProxyListener> getProxyListeners();
    void removeProxyListener(IProxyListener listener);
    void registerScannerListener(IScannerListener listener);
    List<IScannerListener> getScannerListeners();
    void removeScannerListener(IScannerListener listener);
    void registerScopeChangeListener(IScopeChangeListener listener);
    List<IScopeChangeListener> getScopeChangeListeners();
    void removeScopeChangeListener(IScopeChangeListener listener);
    void registerContextMenuFactory(IContextMenuFactory factory);
    List<IContextMenuFactory> getContextMenuFactories();
    void removeContextMenuFactory(IContextMenuFactory factory);
    void registerMessageEditorTabFactory(IMessageEditorTabFactory factory);
    List<IMessageEditorTabFactory> getMessageEditorTabFactories();
    void removeMessageEditorTabFactory(IMessageEditorTabFactory factory);
    void registerScannerInsertionPointProvider(IScannerInsertionPointProvider provider);
    List<IScannerInsertionPointProvider> getScannerInsertionPointProviders();
    void removeScannerInsertionPointProvider(IScannerInsertionPointProvider provider);
    void registerScannerCheck(IScannerCheck check);
    List<IScannerCheck> getScannerChecks();
    void removeScannerCheck(IScannerCheck check);
    void registerIntruderPayloadGeneratorFactory(IIntruderPayloadGeneratorFactory factory);
    List<IIntruderPayloadGeneratorFactory> getIntruderPayloadGeneratorFactories();
    void removeIntruderPayloadGeneratorFactory(IIntruderPayloadGeneratorFactory factory);
    void registerIntruderPayloadProcessor(IIntruderPayloadProcessor processor);
    List<IIntruderPayloadProcessor> getIntruderPayloadProcessors();
    void removeIntruderPayloadProcessor(IIntruderPayloadProcessor processor);
    void registerSessionHandlingAction(ISessionHandlingAction action);
    List<ISessionHandlingAction> getSessionHandlingActions();
    void removeSessionHandlingAction(ISessionHandlingAction action);
    void unloadExtension();
    void addSuiteTab(ITab tab);
    void removeSuiteTab(ITab tab);
    void customizeUiComponent(Component component);
    IMessageEditor createMessageEditor(IMessageEditorController controller, boolean editable);
    String[] getCommandLineArguments();
    void saveExtensionSetting(String name, String value);
    String loadExtensionSetting(String name);
    ITextEditor createTextEditor();
    void sendToRepeater(String host, int port, boolean useHttps, byte[] request, String tabCaption);
    void sendToIntruder(String host, int port, boolean useHttps, byte[] request);
    void sendToIntruder(String host, int port, boolean useHttps, byte[] request, List<int[]> payloadPositions);
    void sendToComparer(byte[] data);
    void sendToSpider(URL url);
    IScanQueueItem doActiveScan(String host, int port, boolean useHttps, byte[] request);
    IScanQueueItem doActiveScan(String host, int port, boolean useHttps, byte[] request, List<int[]> insertionPointOffsets);
    void doPassiveScan(String host, int port, boolean useHttps, byte[] request, byte[] response);
    IHttpRequestResponse makeHttpRequest(IHttpService httpService, byte[] request);
    byte[] makeHttpRequest(String host, int port, boolean useHttps, byte[] request);
    boolean isInScope(URL url);
    void includeInScope(URL url);
    void excludeFromScope(URL url);
    void issueAlert(String message);
    IHttpRequestResponse[] getProxyHistory();
    IHttpRequestResponse[] getSiteMap(String urlPrefix);
    IScanIssue[] getScanIssues(String urlPrefix);
    void generateScanReport(String format, IScanIssue[] issues, File file);
    List<ICookie> getCookieJarContents();
    void updateCookieJar(ICookie cookie);
    void addToSiteMap(IHttpRequestResponse item);
    void restoreState(File file);
    void saveState(File file);
    Map<String, String> saveConfig();
    void loadConfig(Map<String, String> config);
    String saveConfigAsJson(String... configPaths);
    void loadConfigFromJson(String config);
    void setProxyInterceptionEnabled(boolean enabled);
    String[] getBurpVersion();
    String getExtensionFilename();
    boolean isExtensionBapp();
    void exitSuite(boolean promptUser);
    ITempFile saveToTempFile(byte[] buffer);
    IHttpRequestResponsePersisted saveBuffersToTempFiles(IHttpRequestResponse currentlyDisplayedItem);
    IHttpRequestResponseWithMarkers applyMarkers(IHttpRequestResponse httpRequestResponse, List<int[]> requestMarkers, List<int[]> responseMarkers);
    String getToolName(int toolFlag);
    void addScanIssue(IScanIssue issue);
    IBurpCollaboratorClientContext createBurpCollaboratorClientContext();
    String[][] getParameters(byte[] request);
    String[] getHeaders(byte[] message);
    void registerMenuItem(String menuItemCaption, IMenuItemHandler menuItemHandler);
}